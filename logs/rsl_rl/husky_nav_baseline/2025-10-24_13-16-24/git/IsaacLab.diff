--- git status ---
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   source/isaaclab/isaaclab/actuators/__pycache__/actuator_pd.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/app/__pycache__/app_launcher.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/assets/articulation/__pycache__/articulation.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/envs/__pycache__/__init__.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/envs/__pycache__/direct_rl_env.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/envs/__pycache__/manager_based_rl_env.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/envs/mdp/__pycache__/events.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/envs/mdp/__pycache__/terminations.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/envs/mdp/terminations.py
	modified:   source/isaaclab/isaaclab/sensors/contact_sensor/__pycache__/contact_sensor.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sensors/ray_caster/patterns/__pycache__/patterns.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sim/__pycache__/simulation_cfg.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sim/__pycache__/simulation_context.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sim/__pycache__/utils.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sim/converters/__pycache__/mesh_converter.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/__init__.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/physics_materials_cfg.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sim/spawners/sensors/__pycache__/sensors_cfg.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/sim/spawners/shapes/__pycache__/shapes.cpython-311.pyc
	modified:   source/isaaclab/isaaclab/utils/io/__pycache__/__init__.cpython-311.pyc
	modified:   source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/__pycache__/husky_env_cfg.cpython-311.pyc
	modified:   source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/husky_env_cfg.py
	modified:   source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/__pycache__/rewards.cpython-311.pyc
	modified:   source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/rewards.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	logs/rsl_rl/husky_nav_baseline/2025-10-24_11-40-22/
	logs/rsl_rl/husky_nav_baseline/2025-10-24_11-42-15/
	logs/rsl_rl/husky_nav_baseline/2025-10-24_11-51-52/
	logs/rsl_rl/husky_nav_baseline/2025-10-24_12-02-20/
	logs/rsl_rl/husky_nav_baseline/2025-10-24_12-14-19/
	logs/rsl_rl/husky_nav_baseline/2025-10-24_12-24-52/
	logs/rsl_rl/husky_nav_baseline/2025-10-24_13-16-24/
	outputs/2025-10-24/11-40-22/
	outputs/2025-10-24/11-42-15/
	outputs/2025-10-24/11-51-52/
	outputs/2025-10-24/12-02-20/
	outputs/2025-10-24/12-14-19/
	outputs/2025-10-24/12-24-52/
	outputs/2025-10-24/12-30-05/
	outputs/2025-10-24/13-16-24/

no changes added to commit (use "git add" and/or "git commit -a") 


--- git diff ---
diff --git a/source/isaaclab/isaaclab/actuators/__pycache__/actuator_pd.cpython-311.pyc b/source/isaaclab/isaaclab/actuators/__pycache__/actuator_pd.cpython-311.pyc
index 2e5b65605a..422e5af161 100644
Binary files a/source/isaaclab/isaaclab/actuators/__pycache__/actuator_pd.cpython-311.pyc and b/source/isaaclab/isaaclab/actuators/__pycache__/actuator_pd.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/app/__pycache__/app_launcher.cpython-311.pyc b/source/isaaclab/isaaclab/app/__pycache__/app_launcher.cpython-311.pyc
index dde2eafc3f..5c288385f7 100644
Binary files a/source/isaaclab/isaaclab/app/__pycache__/app_launcher.cpython-311.pyc and b/source/isaaclab/isaaclab/app/__pycache__/app_launcher.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/assets/articulation/__pycache__/articulation.cpython-311.pyc b/source/isaaclab/isaaclab/assets/articulation/__pycache__/articulation.cpython-311.pyc
index fa25067f67..eba8f1ac05 100644
Binary files a/source/isaaclab/isaaclab/assets/articulation/__pycache__/articulation.cpython-311.pyc and b/source/isaaclab/isaaclab/assets/articulation/__pycache__/articulation.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/envs/__pycache__/__init__.cpython-311.pyc b/source/isaaclab/isaaclab/envs/__pycache__/__init__.cpython-311.pyc
index b8e2e9758a..e12947073f 100644
Binary files a/source/isaaclab/isaaclab/envs/__pycache__/__init__.cpython-311.pyc and b/source/isaaclab/isaaclab/envs/__pycache__/__init__.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/envs/__pycache__/direct_rl_env.cpython-311.pyc b/source/isaaclab/isaaclab/envs/__pycache__/direct_rl_env.cpython-311.pyc
index 9f01988934..88d59fc872 100644
Binary files a/source/isaaclab/isaaclab/envs/__pycache__/direct_rl_env.cpython-311.pyc and b/source/isaaclab/isaaclab/envs/__pycache__/direct_rl_env.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/envs/__pycache__/manager_based_rl_env.cpython-311.pyc b/source/isaaclab/isaaclab/envs/__pycache__/manager_based_rl_env.cpython-311.pyc
index 2ea204d6a7..80dcadd35f 100644
Binary files a/source/isaaclab/isaaclab/envs/__pycache__/manager_based_rl_env.cpython-311.pyc and b/source/isaaclab/isaaclab/envs/__pycache__/manager_based_rl_env.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/envs/mdp/__pycache__/events.cpython-311.pyc b/source/isaaclab/isaaclab/envs/mdp/__pycache__/events.cpython-311.pyc
index ddda107ae5..07a78dcc91 100644
Binary files a/source/isaaclab/isaaclab/envs/mdp/__pycache__/events.cpython-311.pyc and b/source/isaaclab/isaaclab/envs/mdp/__pycache__/events.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/envs/mdp/__pycache__/terminations.cpython-311.pyc b/source/isaaclab/isaaclab/envs/mdp/__pycache__/terminations.cpython-311.pyc
index 617d5714bd..2b9e6972e5 100644
Binary files a/source/isaaclab/isaaclab/envs/mdp/__pycache__/terminations.cpython-311.pyc and b/source/isaaclab/isaaclab/envs/mdp/__pycache__/terminations.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/envs/mdp/terminations.py b/source/isaaclab/isaaclab/envs/mdp/terminations.py
index a13ce9bb4a..10f9257d49 100644
--- a/source/isaaclab/isaaclab/envs/mdp/terminations.py
+++ b/source/isaaclab/isaaclab/envs/mdp/terminations.py
@@ -46,6 +46,35 @@ def command_resample(env: ManagerBasedRLEnv, command_name: str, num_resamples: i
 Root terminations.
 """
 
+def goal_reached_termination(
+    env: ManagerBasedRLEnv,
+    threshold: float = 0.3,
+    asset_cfg: SceneEntityCfg = SceneEntityCfg("robot"),
+) -> torch.Tensor:
+    """Terminate episode when the robot reaches the commanded 2D goal."""
+    # 1. Достаем объект робота
+    asset: RigidObject = env.scene[asset_cfg.name]
+    base_pos = asset.data.root_pos_w[:, :2]  # XY позиция робота
+
+    # 2. Получаем текущую команду
+    pose_command = env.command_manager.get_command("pose_command")
+
+    # 3. Извлекаем целевую позицию (в мировых координатах)
+    if hasattr(pose_command, "pos_command_w"):
+        goal_pos = pose_command[:, :2]  # XY цель
+    else:
+        goal_pos = pose_command[:, :2]  # fallback
+
+    # 4. Вычисляем расстояние
+    distance = torch.norm(base_pos - goal_pos, dim=-1)
+
+    # 5. (опционально) вывести для отладки
+    # print("Base pos:", base_pos)
+    # print("Goal pos:", goal_pos)
+    # print("Distance:", distance)
+
+    # 6. Возвращаем условие завершения
+    return distance < threshold
 
 def bad_orientation(
     env: ManagerBasedRLEnv, limit_angle: float, asset_cfg: SceneEntityCfg = SceneEntityCfg("robot")
@@ -159,3 +188,5 @@ def illegal_contact(env: ManagerBasedRLEnv, threshold: float, sensor_cfg: SceneE
     return torch.any(
         torch.max(torch.norm(net_contact_forces[:, :, sensor_cfg.body_ids], dim=-1), dim=1)[0] > threshold, dim=1
     )
+
+
diff --git a/source/isaaclab/isaaclab/sensors/contact_sensor/__pycache__/contact_sensor.cpython-311.pyc b/source/isaaclab/isaaclab/sensors/contact_sensor/__pycache__/contact_sensor.cpython-311.pyc
index 065639d766..e277f2fe2e 100644
Binary files a/source/isaaclab/isaaclab/sensors/contact_sensor/__pycache__/contact_sensor.cpython-311.pyc and b/source/isaaclab/isaaclab/sensors/contact_sensor/__pycache__/contact_sensor.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sensors/ray_caster/patterns/__pycache__/patterns.cpython-311.pyc b/source/isaaclab/isaaclab/sensors/ray_caster/patterns/__pycache__/patterns.cpython-311.pyc
index 2c19442c5f..dffa3c6661 100644
Binary files a/source/isaaclab/isaaclab/sensors/ray_caster/patterns/__pycache__/patterns.cpython-311.pyc and b/source/isaaclab/isaaclab/sensors/ray_caster/patterns/__pycache__/patterns.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sim/__pycache__/simulation_cfg.cpython-311.pyc b/source/isaaclab/isaaclab/sim/__pycache__/simulation_cfg.cpython-311.pyc
index c5b2bfbaea..375c90d35d 100644
Binary files a/source/isaaclab/isaaclab/sim/__pycache__/simulation_cfg.cpython-311.pyc and b/source/isaaclab/isaaclab/sim/__pycache__/simulation_cfg.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sim/__pycache__/simulation_context.cpython-311.pyc b/source/isaaclab/isaaclab/sim/__pycache__/simulation_context.cpython-311.pyc
index def8cf6a62..b749291f9f 100644
Binary files a/source/isaaclab/isaaclab/sim/__pycache__/simulation_context.cpython-311.pyc and b/source/isaaclab/isaaclab/sim/__pycache__/simulation_context.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sim/__pycache__/utils.cpython-311.pyc b/source/isaaclab/isaaclab/sim/__pycache__/utils.cpython-311.pyc
index f98be99a8a..72d697d682 100644
Binary files a/source/isaaclab/isaaclab/sim/__pycache__/utils.cpython-311.pyc and b/source/isaaclab/isaaclab/sim/__pycache__/utils.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sim/converters/__pycache__/mesh_converter.cpython-311.pyc b/source/isaaclab/isaaclab/sim/converters/__pycache__/mesh_converter.cpython-311.pyc
index bac9a8569d..6cacf6a59c 100644
Binary files a/source/isaaclab/isaaclab/sim/converters/__pycache__/mesh_converter.cpython-311.pyc and b/source/isaaclab/isaaclab/sim/converters/__pycache__/mesh_converter.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/__init__.cpython-311.pyc b/source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/__init__.cpython-311.pyc
index 5f09d063d0..608a7d422e 100644
Binary files a/source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/__init__.cpython-311.pyc and b/source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/__init__.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/physics_materials_cfg.cpython-311.pyc b/source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/physics_materials_cfg.cpython-311.pyc
index 8f2947d94f..a2ad83eca3 100644
Binary files a/source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/physics_materials_cfg.cpython-311.pyc and b/source/isaaclab/isaaclab/sim/spawners/materials/__pycache__/physics_materials_cfg.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sim/spawners/sensors/__pycache__/sensors_cfg.cpython-311.pyc b/source/isaaclab/isaaclab/sim/spawners/sensors/__pycache__/sensors_cfg.cpython-311.pyc
index a4be96fa24..505c7f6b94 100644
Binary files a/source/isaaclab/isaaclab/sim/spawners/sensors/__pycache__/sensors_cfg.cpython-311.pyc and b/source/isaaclab/isaaclab/sim/spawners/sensors/__pycache__/sensors_cfg.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/sim/spawners/shapes/__pycache__/shapes.cpython-311.pyc b/source/isaaclab/isaaclab/sim/spawners/shapes/__pycache__/shapes.cpython-311.pyc
index ea753953ab..ff466f11e6 100644
Binary files a/source/isaaclab/isaaclab/sim/spawners/shapes/__pycache__/shapes.cpython-311.pyc and b/source/isaaclab/isaaclab/sim/spawners/shapes/__pycache__/shapes.cpython-311.pyc differ
diff --git a/source/isaaclab/isaaclab/utils/io/__pycache__/__init__.cpython-311.pyc b/source/isaaclab/isaaclab/utils/io/__pycache__/__init__.cpython-311.pyc
index 2a53cd90ad..b8b1ee84ef 100644
Binary files a/source/isaaclab/isaaclab/utils/io/__pycache__/__init__.cpython-311.pyc and b/source/isaaclab/isaaclab/utils/io/__pycache__/__init__.cpython-311.pyc differ
diff --git a/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/__pycache__/husky_env_cfg.cpython-311.pyc b/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/__pycache__/husky_env_cfg.cpython-311.pyc
index 436ec29c57..359621ed46 100644
Binary files a/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/__pycache__/husky_env_cfg.cpython-311.pyc and b/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/__pycache__/husky_env_cfg.cpython-311.pyc differ
diff --git a/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/husky_env_cfg.py b/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/husky_env_cfg.py
index 844079d241..b12131b3b0 100644
--- a/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/husky_env_cfg.py
+++ b/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/config/husky/husky_env_cfg.py
@@ -20,9 +20,10 @@ from isaaclab.utils.assets import ISAACLAB_NUCLEUS_DIR
 
 import isaaclab_tasks.manager_based.navigation.mdp as mdp
 from isaaclab_tasks.manager_based.navigation.mdp.custom_mdp import DiffDriveVelocityAction, DiffDriveVelocityActionCfg
+from isaaclab_assets.robots import ur5_husky # isort: skip
+
 
 
-from isaaclab_assets.robots import ur5_husky # isort: skip
 UR5M_CFG = ur5_husky.UR5M_CFG
 
 
@@ -97,27 +98,76 @@ class ObservationsCfg:
     policy: PolicyCfg = PolicyCfg()
 
 
+# @configclass
+# class RewardsCfg:
+#     """Reward terms for the MDP."""
+
+#     termination_penalty = RewTerm(func=mdp.is_terminated, weight=-400.0)
+#     position_tracking = RewTerm(
+#         func=mdp.position_command_error_tanh,
+#         weight=0.5,
+#         params={"std": 2.0, "command_name": "pose_command"},
+#     )
+#     position_tracking_fine_grained = RewTerm(
+#         func=mdp.position_command_error_tanh,
+#         weight=0.5,
+#         params={"std": 0.2, "command_name": "pose_command"},
+#     )
+#     orientation_tracking = RewTerm(
+#         func=mdp.heading_command_error_abs,
+#         weight=-0.2,
+#         params={"command_name": "pose_command"},
+#     )
 @configclass
 class RewardsCfg:
     """Reward terms for the MDP."""
 
+    # Штраф за терминацию
     termination_penalty = RewTerm(func=mdp.is_terminated, weight=-400.0)
+    
+    # Основная награда за приближение к цели (работает на всех дистанциях)
     position_tracking = RewTerm(
         func=mdp.position_command_error_tanh,
-        weight=0.5,
-        params={"std": 2.0, "command_name": "pose_command"},
+        weight=1.5,
+        params={"std": 1.0, "command_name": "pose_command"},
     )
-    position_tracking_fine_grained = RewTerm(
+    
+    # Точная награда за финальную позицию (активна только вблизи)
+    position_tracking_fine = RewTerm(
         func=mdp.position_command_error_tanh,
-        weight=0.5,
-        params={"std": 0.2, "command_name": "pose_command"},
+        weight=2.0,
+        params={"std": 0.15, "command_name": "pose_command"},
     )
+    
+    # Точная ориентация (важно для манипулятора)
     orientation_tracking = RewTerm(
         func=mdp.heading_command_error_abs,
-        weight=-0.2,
+        weight=-1.5,
         params={"command_name": "pose_command"},
     )
-
+    
+    # КЛЮЧЕВАЯ НАГРАДА: Полная стабильность у цели
+    stability_at_goal = RewTerm(
+        func=mdp.stability_reward,
+        weight=6.0,  # высокий вес - это главная цель!
+        params={
+            "command_name": "pose_command",
+            "position_threshold": 0.25,      # в пределах 20см
+            "orientation_threshold": 0.2,   # ~8.6 градусов
+            "lin_velocity_threshold": 0.08,  # почти остановился
+            "ang_velocity_threshold": 0.08
+        }
+    )
+    
+    # Адаптивный штраф за скорость (замедление при приближении)
+    adaptive_velocity_penalty = RewTerm(
+        func=mdp.distance_based_velocity_penalty,
+        weight=-1.5,
+        params={
+            "command_name": "pose_command",
+            "activation_distance": 1.2  # начинаем тормозить за 1.2м
+        }
+    )
 
 @configclass
 class CommandsCfg:
@@ -131,12 +181,13 @@ class CommandsCfg:
         ranges=mdp.UniformPose2dCommandCfg.Ranges(pos_x=(-4.0, 4.0), pos_y=(-4.0, 4.0), heading=(-math.pi, math.pi)),
     )
 
-
+    
 @configclass
 class TerminationsCfg:
     """Termination terms for the MDP."""
 
     time_out = DoneTerm(func=mdp.time_out, time_out=True) 
+    # goal_reached = DoneTerm(func=mdp.goal_reached_termination, params={"threshold": 0.1})
 
 
 @configclass
@@ -152,7 +203,6 @@ class HuskyNavEnvCfg(ManagerBasedRLEnvCfg):
     commands: CommandsCfg = CommandsCfg()
     rewards: RewardsCfg = RewardsCfg()
     terminations: TerminationsCfg = TerminationsCfg()
-
     def __post_init__(self):
         """Post initialization."""
         self.decimation = 2
diff --git a/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/__pycache__/rewards.cpython-311.pyc b/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/__pycache__/rewards.cpython-311.pyc
index bcf983064b..f9edd8fd07 100644
Binary files a/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/__pycache__/rewards.cpython-311.pyc and b/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/__pycache__/rewards.cpython-311.pyc differ
diff --git a/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/rewards.py b/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/rewards.py
index 59c7ec5a93..1fa529ea8e 100644
--- a/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/rewards.py
+++ b/source/isaaclab_tasks/isaaclab_tasks/manager_based/navigation/mdp/rewards.py
@@ -7,11 +7,12 @@ from __future__ import annotations
 
 import torch
 from typing import TYPE_CHECKING
-
+from isaaclab.assets import RigidObject
+from isaaclab.managers import SceneEntityCfg
+from isaaclab.utils.math import combine_frame_transforms, quat_error_magnitude, quat_mul
 if TYPE_CHECKING:
     from isaaclab.envs import ManagerBasedRLEnv
 
-
 def position_command_error_tanh(env: ManagerBasedRLEnv, std: float, command_name: str) -> torch.Tensor:
     """Reward position tracking with tanh kernel."""
     command = env.command_manager.get_command(command_name)
@@ -25,3 +26,127 @@ def heading_command_error_abs(env: ManagerBasedRLEnv, command_name: str) -> torc
     command = env.command_manager.get_command(command_name)
     heading_b = command[:, 3]
     return heading_b.abs()
+
+#####CUSTOM REWARDS#####
+
+def stability_reward(
+    env: "ManagerBasedRLEnv",
+    command_name: str,
+    position_threshold: float = 0.25,
+    orientation_threshold: float = 0.1,
+    lin_velocity_threshold: float = 0.05,
+    ang_velocity_threshold: float = 0.05
+) -> torch.Tensor:
+    """
+    Награда за полную стабильность у цели.
+    Робот должен быть: на месте, правильно ориентирован, и неподвижен.
+    Идеально для подготовки к манипуляции.
+    """
+    command = env.command_manager.get_command(command_name)
+    
+    # Позиция
+    robot_pos = env.scene["robot"].data.root_pos_w[:, :2]
+    goal_pos = command[:, :2]
+    position_error = torch.norm(goal_pos - robot_pos, dim=-1)
+    
+    # Ориентация
+    robot_heading = env.scene["robot"].data.heading_w
+    goal_heading = command[:, 2]
+    heading_error = torch.abs(torch.atan2(
+        torch.sin(goal_heading - robot_heading),
+        torch.cos(goal_heading - robot_heading)
+    ))
+    
+    # Скорости
+    lin_vel = torch.norm(env.scene["robot"].data.root_lin_vel_b[:, :2], dim=-1)
+    ang_vel = torch.abs(env.scene["robot"].data.root_ang_vel_b[:, 2])
+    
+    # Все условия должны выполняться
+    at_position = position_error < position_threshold
+    at_orientation = heading_error < orientation_threshold
+    lin_stopped = lin_vel < lin_velocity_threshold
+    ang_stopped = ang_vel < ang_velocity_threshold
+    
+    # Полная стабильность
+    fully_stable = at_position & at_orientation & lin_stopped & ang_stopped
+    
+    # Градуированная награда: чем больше условий выполнено, тем больше награда
+    reward = torch.zeros_like(position_error)
+    reward += at_position.float() * 0.25
+    reward += at_orientation.float() * 0.25
+    reward += lin_stopped.float() * 0.25
+    reward += ang_stopped.float() * 0.25
+    
+    # Бонус за полную стабильность
+    reward += fully_stable.float() * 1.0
+    
+    return reward
+
+
+def distance_based_velocity_penalty(
+    env: "ManagerBasedRLEnv",
+    command_name: str,
+    activation_distance: float = 1.0
+) -> torch.Tensor:
+    """
+    Штраф за скорость, который увеличивается по мере приближения к цели.
+    Заставляет робота замедляться плавно.
+    """
+    command = env.command_manager.get_command(command_name)
+    
+    # Расстояние до цели
+    robot_pos = env.scene["robot"].data.root_pos_w[:, :2]
+    goal_pos = command[:, :2]
+    distance = torch.norm(goal_pos - robot_pos, dim=-1)
+    
+    # Скорость
+    lin_vel = torch.norm(env.scene["robot"].data.root_lin_vel_b[:, :2], dim=-1)
+    ang_vel = torch.abs(env.scene["robot"].data.root_ang_vel_b[:, 2])
+    
+    # Коэффициент штрафа растет при приближении к цели
+    # distance >= activation_distance: penalty_factor = 0
+    # distance = 0: penalty_factor = 1
+    penalty_factor = torch.clamp(1.0 - distance / activation_distance, 0.0, 1.0)
+    
+    # Штраф пропорционален скорости и близости к цели
+    penalty = penalty_factor * (lin_vel + ang_vel * 0.5)
+    
+    return penalty
+
+
+
+
+def position_command_error(env: ManagerBasedRLEnv, command_name: str, asset_cfg: SceneEntityCfg) -> torch.Tensor:
+    """Penalize tracking of the position error using L2-norm.
+
+    The function computes the position error between the desired position (from the command) and the
+    current position of the asset's body (in world frame). The position error is computed as the L2-norm
+    of the difference between the desired and current positions.
+    """
+    # extract the asset (to enable type hinting)
+    asset: RigidObject = env.scene[asset_cfg.name]
+    command = env.command_manager.get_command(command_name)
+    # obtain the desired and current positions
+    des_pos_b = command[:, :3]
+    des_pos_w, _ = combine_frame_transforms(asset.data.root_pos_w, asset.data.root_quat_w, des_pos_b)
+    curr_pos_w = asset.data.body_pos_w[:, asset_cfg.body_ids[0]]  # type: ignore
+
+    return torch.norm(curr_pos_w - des_pos_w, dim=1)
+
+
+
+def orientation_command_error(env: ManagerBasedRLEnv, command_name: str, asset_cfg: SceneEntityCfg) -> torch.Tensor:
+    """Penalize tracking orientation error using shortest path.
+
+    The function computes the orientation error between the desired orientation (from the command) and the
+    current orientation of the asset's body (in world frame). The orientation error is computed as the shortest
+    path between the desired and current orientations.
+    """
+    # extract the asset (to enable type hinting)
+    asset: RigidObject = env.scene[asset_cfg.name]
+    command = env.command_manager.get_command(command_name)
+    # obtain the desired and current orientations
+    des_quat_b = command[:, 3:7]
+    des_quat_w = quat_mul(asset.data.root_quat_w, des_quat_b)
+    curr_quat_w = asset.data.body_quat_w[:, asset_cfg.body_ids[0]]  # type: ignore
+    return quat_error_magnitude(curr_quat_w, des_quat_w)